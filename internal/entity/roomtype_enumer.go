// Code generated by "enumer -type=RoomType -json -trimprefix RoomType"; DO NOT EDIT.

package entity

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _RoomTypeName = "EconomyStandardLuxury"

var _RoomTypeIndex = [...]uint8{0, 7, 15, 21}

const _RoomTypeLowerName = "economystandardluxury"

func (i RoomType) String() string {
	i -= 1
	if i < 0 || i >= RoomType(len(_RoomTypeIndex)-1) {
		return fmt.Sprintf("RoomType(%d)", i+1)
	}
	return _RoomTypeName[_RoomTypeIndex[i]:_RoomTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _RoomTypeNoOp() {
	var x [1]struct{}
	_ = x[RoomTypeEconomy-(1)]
	_ = x[RoomTypeStandard-(2)]
	_ = x[RoomTypeLuxury-(3)]
}

var _RoomTypeValues = []RoomType{RoomTypeEconomy, RoomTypeStandard, RoomTypeLuxury}

var _RoomTypeNameToValueMap = map[string]RoomType{
	_RoomTypeName[0:7]:        RoomTypeEconomy,
	_RoomTypeLowerName[0:7]:   RoomTypeEconomy,
	_RoomTypeName[7:15]:       RoomTypeStandard,
	_RoomTypeLowerName[7:15]:  RoomTypeStandard,
	_RoomTypeName[15:21]:      RoomTypeLuxury,
	_RoomTypeLowerName[15:21]: RoomTypeLuxury,
}

var _RoomTypeNames = []string{
	_RoomTypeName[0:7],
	_RoomTypeName[7:15],
	_RoomTypeName[15:21],
}

// RoomTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func RoomTypeString(s string) (RoomType, error) {
	if val, ok := _RoomTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _RoomTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to RoomType values", s)
}

// RoomTypeValues returns all values of the enum
func RoomTypeValues() []RoomType {
	return _RoomTypeValues
}

// RoomTypeStrings returns a slice of all String values of the enum
func RoomTypeStrings() []string {
	strs := make([]string, len(_RoomTypeNames))
	copy(strs, _RoomTypeNames)
	return strs
}

// IsARoomType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i RoomType) IsARoomType() bool {
	for _, v := range _RoomTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for RoomType
func (i RoomType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for RoomType
func (i *RoomType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("RoomType should be a string, got %s", data)
	}

	var err error
	*i, err = RoomTypeString(s)
	return err
}
